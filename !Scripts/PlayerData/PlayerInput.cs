//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/!Scripts/PlayerData/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Normal"",
            ""id"": ""e3b58c58-642a-493e-9eb4-9adf0d2e72e4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""77674e53-de58-46af-8019-94f5a0519a6a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WalkToggle"",
                    ""type"": ""Button"",
                    ""id"": ""d50f44a3-a8c9-4d9a-b712-1b3bd9301f6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatMode"",
                    ""type"": ""Button"",
                    ""id"": ""89b1f2b6-f2a1-4fdb-8b8c-02b77c8be341"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""fb60cc98-2782-4135-984c-91ea3845808d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4cacdda3-5419-4c72-9177-0a8ae142c336"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c0311952-4052-45af-81c8-1e7ff74cd057"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ab6b0d49-81f0-4e7a-97b0-7349d0b57cb8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""65a16732-d6ab-492b-9fdb-a0a51d381659"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e5a6efa9-0a9a-43e9-94dc-f95c14f65e4c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a8f11dac-f4a0-441c-a0b4-d4874df9b7e6"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32ceca6e-9ef9-4a46-a39b-5792dbda5eb6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f530a40-33bb-421f-8396-14e667662baf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""gui"",
            ""id"": ""c7fb1273-4407-4adc-b261-93339f6e2a34"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""d730ede7-0c3c-4f98-809b-33143106071a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a814239-e921-452d-ab87-c806389bb2c7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Normal
        m_Normal = asset.FindActionMap("Normal", throwIfNotFound: true);
        m_Normal_Move = m_Normal.FindAction("Move", throwIfNotFound: true);
        m_Normal_WalkToggle = m_Normal.FindAction("WalkToggle", throwIfNotFound: true);
        m_Normal_CombatMode = m_Normal.FindAction("CombatMode", throwIfNotFound: true);
        m_Normal_Jump = m_Normal.FindAction("Jump", throwIfNotFound: true);
        // gui
        m_gui = asset.FindActionMap("gui", throwIfNotFound: true);
        m_gui_Newaction = m_gui.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Normal
    private readonly InputActionMap m_Normal;
    private INormalActions m_NormalActionsCallbackInterface;
    private readonly InputAction m_Normal_Move;
    private readonly InputAction m_Normal_WalkToggle;
    private readonly InputAction m_Normal_CombatMode;
    private readonly InputAction m_Normal_Jump;
    public struct NormalActions
    {
        private @PlayerInput m_Wrapper;
        public NormalActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Normal_Move;
        public InputAction @WalkToggle => m_Wrapper.m_Normal_WalkToggle;
        public InputAction @CombatMode => m_Wrapper.m_Normal_CombatMode;
        public InputAction @Jump => m_Wrapper.m_Normal_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Normal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
        public void SetCallbacks(INormalActions instance)
        {
            if (m_Wrapper.m_NormalActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @WalkToggle.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnWalkToggle;
                @WalkToggle.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnWalkToggle;
                @WalkToggle.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnWalkToggle;
                @CombatMode.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnCombatMode;
                @CombatMode.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnCombatMode;
                @CombatMode.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnCombatMode;
                @Jump.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_NormalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @WalkToggle.started += instance.OnWalkToggle;
                @WalkToggle.performed += instance.OnWalkToggle;
                @WalkToggle.canceled += instance.OnWalkToggle;
                @CombatMode.started += instance.OnCombatMode;
                @CombatMode.performed += instance.OnCombatMode;
                @CombatMode.canceled += instance.OnCombatMode;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public NormalActions @Normal => new NormalActions(this);

    // gui
    private readonly InputActionMap m_gui;
    private IGuiActions m_GuiActionsCallbackInterface;
    private readonly InputAction m_gui_Newaction;
    public struct GuiActions
    {
        private @PlayerInput m_Wrapper;
        public GuiActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_gui_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_gui; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GuiActions set) { return set.Get(); }
        public void SetCallbacks(IGuiActions instance)
        {
            if (m_Wrapper.m_GuiActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_GuiActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_GuiActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_GuiActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_GuiActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public GuiActions @gui => new GuiActions(this);
    public interface INormalActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnWalkToggle(InputAction.CallbackContext context);
        void OnCombatMode(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IGuiActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
